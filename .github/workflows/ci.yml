name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Stage
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./my-app

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm install

      - name: Generate Prisma Client
        run: npx prisma generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Build Project
        run: npm run build
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXT_PUBLIC_BASE_URL: ${{ secrets.NEXT_PUBLIC_BASE_URL }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}

  test:
    name: Test Stage
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ./my-app

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test -- --json --outputFile=test-results.json || echo "No tests defined"

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: my-app/test-results.json

  coverage:
    name: Coverage Stage
    runs-on: ubuntu-latest
    needs: test
    defaults:
      run:
        working-directory: ./my-app

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm install

      - name: Run Coverage
        run: npm run test -- --coverage --coverageReporters="html" || echo "Coverage not available"

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: my-app/coverage/

  lint:
    name: Lint Stage
    runs-on: ubuntu-latest
    needs: coverage
    defaults:
      run:
        working-directory: ./my-app

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm install

      - name: Run Linter
        run: npx eslint . --format json --output-file lint-report.json || true

      - name: Upload Lint Report
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: my-app/lint-report.json

  security:
    name: Security Scan Stage
    runs-on: ubuntu-latest
    needs: lint
    defaults:
      run:
        working-directory: ./my-app

    steps:
      - uses: actions/checkout@v4

      - name: Run Security Scan
        run: npm audit --json > security-report.json || true

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: my-app/security-report.json

  artifact:
    name: Deployment Artifact Stage
    runs-on: ubuntu-latest
    needs: security
    defaults:
      run:
        working-directory: ./my-app

    steps:
      - uses: actions/checkout@v4

      - name: Create Artifact Folder
        run: mkdir -p build-artifact/reports

      - name: Copy Project Files
        run: |
          cp -r .next package.json README.md build-artifact/
          cp -r coverage build-artifact/reports/ || true
          cp lint-report.json build-artifact/reports/ || true
          cp security-report.json build-artifact/reports/ || true
          cp test-results.json build-artifact/reports/ || true

      - name: Zip Artifact
        run: zip -r project-$(date +'%Y-%m-%d').zip build-artifact

      - name: Upload Deployment Artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifact
          path: my-app/project-*.zip

  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: artifact
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./my-app

    steps:
      - uses: actions/checkout@v4

      - name: Setup Vercel CLI
        run: npm install -g vercel

      - name: Pull Environment Info
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build with Vercel
        run: |
          vercel build --prod \
            --token=${{ secrets.VERCEL_TOKEN }} \
            --project-id=${{ secrets.VERCEL_PROJECT_ID }} \
            --org-id=${{ secrets.VERCEL_ORG_ID }}

      - name: Deploy to Vercel
        run: |
          vercel deploy --prebuilt --prod \
            --token=${{ secrets.VERCEL_TOKEN }} \
            --project-id=${{ secrets.VERCEL_PROJECT_ID }} \
            --org-id=${{ secrets.VERCEL_ORG_ID }}
