name: CI/CD Pipeline

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

# üåç Global environment variables shared across all jobs
env:
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  NEXT_PUBLIC_BASE_URL: ${{ secrets.NEXT_PUBLIC_BASE_URL }}
  SMTP_HOST: ${{ secrets.SMTP_HOST }}
  SMTP_PORT: ${{ secrets.SMTP_PORT }}
  SMTP_USER: ${{ secrets.SMTP_USER }}
  SMTP_PASS: ${{ secrets.SMTP_PASS }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

jobs:
  # üèóÔ∏è BUILD STAGE
  build:
    name: Build Stage
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./my-app

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Build Project
        run: npm run build

  # üß™ TEST STAGE
  test:
    name: Test Stage
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ./my-app

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        run: npm test -- --json --outputFile=test-results.json || echo "No tests defined"

  # üìä COVERAGE STAGE
  coverage:
    name: Coverage Stage
    runs-on: ubuntu-latest
    needs: test
    defaults:
      run:
        working-directory: ./my-app

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm ci

      - name: Run Coverage
        run: npm run test -- --coverage --coverageReporters="text-summary" || echo "Coverage not available"

  # üßπ LINT STAGE
  lint:
    name: Lint Stage
    runs-on: ubuntu-latest
    needs: coverage
    defaults:
      run:
        working-directory: ./my-app

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm ci

      - name: Run Linter
        run: npx eslint . || true

  # üîí SECURITY SCAN STAGE
  security:
    name: Security Scan Stage
    runs-on: ubuntu-latest
    needs: lint
    defaults:
      run:
        working-directory: ./my-app

    steps:
      - uses: actions/checkout@v4

      - name: Run Security Scan
        run: npm audit || true

  # üöÄ DEPLOY STAGE
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: security
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./my-app

    steps:
      - uses: actions/checkout@v4

      - name: Setup Vercel CLI
        run: npm install -g vercel

      - name: Pull Environment Info
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build with Vercel
        run: |
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        run: |
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
