datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  password           String
  name               String?
  passwordResetToken String?
  tokenExpiry        DateTime?
  role               String    @default("student") // "student" or "instructor"

  // Projects created by this instructor
  projects Project[] @relation("InstructorProjects")

  // Invites received by this student
  invites  Invite[]  @relation("StudentInvites")

  // ðŸ‘‡ add back relation to TeamMember
  teamMemberships TeamMember[]
}

model Project {
  id          String    @id @default(cuid())
  title       String
  description String

  instructor   User      @relation("InstructorProjects", fields: [instructorId], references: [id])
  instructorId String

  invites      Invite[]  @relation("ProjectInvites")

  // ðŸ‘‡ add back relation to Team
  teams        Team[]

  createdAt    DateTime  @default(now())
}

model Invite {
  id         String   @id @default(cuid())

  project    Project  @relation("ProjectInvites", fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String

  student    User     @relation("StudentInvites", fields: [studentId], references: [id], onDelete: Cascade)
  studentId  String

  status     String   @default("pending") // pending | accepted | rejected
  createdAt  DateTime @default(now())
}

model Team {
  id         String    @id @default(cuid())
  name       String
  project    Project   @relation(fields: [projectId], references: [id])
  projectId  String
  members    TeamMember[]
  createdAt  DateTime  @default(now())
}

model TeamMember {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  student   User     @relation(fields: [studentId], references: [id])
  studentId String
}
