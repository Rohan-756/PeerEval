// ==========================
// üì¶ DATABASE CONFIGURATION
// ==========================
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ==========================
// üë§ USER MODEL
// ==========================
model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  password           String
  name               String?
  passwordResetToken String?
  tokenExpiry        DateTime?
  role               String    @default("student") // "student" or "instructor"

  // Projects created by this instructor
  projects Project[] @relation("InstructorProjects")

  // Invites received by this student
  invites Invite[] @relation("StudentInvites")

  // Teams where this student is a member
  teamMemberships TeamMember[]

  // Surveys created by this instructor
  surveys Survey[] @relation("InstructorSurveys")
}

// ==========================
// üìÅ PROJECT MODEL
// ==========================
model Project {
  id          String   @id @default(cuid())
  title       String
  description String

  instructor   User     @relation("InstructorProjects", fields: [instructorId], references: [id])
  instructorId String

  invites Invite[] @relation("ProjectInvites")

  // Teams under this project
  teams Team[]

  // Surveys for this project
  surveys Survey[] @relation("ProjectSurveys")

  createdAt DateTime @default(now())
}

// ==========================
// üíå INVITE MODEL
// ==========================
model Invite {
  id        String   @id @default(cuid())
  project   Project  @relation("ProjectInvites", fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  student   User     @relation("StudentInvites", fields: [studentId], references: [id], onDelete: Cascade)
  studentId String
  status    String   @default("pending") // pending | accepted | rejected
  createdAt DateTime @default(now())
}

// ==========================
// üë• TEAM MODEL
// ==========================
model Team {
  id        String       @id @default(cuid())
  name      String
  project   Project      @relation(fields: [projectId], references: [id])
  projectId String
  members   TeamMember[]
  createdAt DateTime     @default(now())
}

// ==========================
// üßç TEAM MEMBER MODEL
// ==========================
model TeamMember {
  id        String @id @default(cuid())
  team      Team   @relation(fields: [teamId], references: [id])
  teamId    String
  student   User   @relation(fields: [studentId], references: [id])
  studentId String
}

// ==========================
// üìù SURVEY MODEL
// ==========================
model Survey {
  id        String   @id @default(cuid())
  title     String
  
  // Relations
  project   Project  @relation("ProjectSurveys", fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  instructor   User     @relation("InstructorSurveys", fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId String

  // Survey criteria
  criteria  Criterion[]
  
  createdAt DateTime @default(now())
}

// ==========================
// üìä CRITERION MODEL
// ==========================
model Criterion {
  id       String @id @default(cuid())
  text     String
  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId String
}